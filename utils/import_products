#!/usr/bin/env ruby

require 'httparty'
require 'nokogiri'
require 'hashie'
require 'byebug'
require 'pp'
require 'dimensions'
require 'openssl'

page = 1
res = HTTParty.get("http://boardgamegeek.com/browse/boardgame/page/#{page}")
top_x = Nokogiri::HTML res.body

top_x.css('td.collection_objectname a').each_with_index do |link, i|
  reg = /\/boardgame\/([0-9]+)\/*./i
  href = link.attributes['href'].value
  bgg_id = href.match(reg).captures.first

  res = HTTParty.get("http://www.boardgamegeek.com/xmlapi/boardgame/#{bgg_id}?marketplace=1")
  doc = Nokogiri::XML res.body
  game = doc.at("//boardgames/boardgame")

  product = Hashie::Mash.new
  product.id = bgg_id
  product.sku = "BGG-#{bgg_id}"
  product.bgg = Hashie::Mash.new(score: ((page * 100) - 100 + i + 1), id: bgg_id )
  product.cache = 3

  product.name = game.at("name[@primary='true']").text
  product.description = game.at("description").text
  product.categories = game.xpath("boardgamesubdomain").map &:text
  product.designers = game.xpath("boardgamedesigner").map &:text

  image_url = game.xpath("image").text
  file_name = image_url.split("/").last
  local_file = "/tmp/#{file_name}"
  puts local_file

  if File.exists? local_file
    File.delete local_file
  end

  File.open(local_file, "wb") do |f| 
    f.write HTTParty.get(image_url).parsed_response
  end

  dim = Dimensions.dimensions(local_file)
  width = 200.0

  unless dim.nil?
    resize_ratio = dim.first.to_f / width
    height = dim.last.to_f / resize_ratio

    product.images = []
    product.images << { type: 'thumbnail', url: game.xpath("thumbnail").text }
    product.images << { type: 'original', url: image_url, width: width.to_i, height: height.to_i  }
  end

  listings = game.xpath("marketplacelistings/listing[price/@currency='USD']")

  if listings.count == 0
    product.price = "#{rand(29..45)}.#{rand(1..99)}".to_f
  else
    price = listings.inject(0) { |sum, listing| sum + listing.at('price').text.to_f }
    product.price = (price / listings.count).round(2)
  end

  puts "Pushing '#{product.name}' Score: #{product.bgg.score}"

  json_payload = JSON.generate({
    request_id: rand(9999999999999999),
    product: product.to_hash }).force_encoding('UTF-8')

  response = HTTParty.post('http://localhost:9292/products/sync', {
    body: json_payload,
    headers: { }
  })


  if response.key? 'request_id'
    puts "-- imported successfully"
  else
    raise 'Failed to import, check sinatra logs'
  end

end
